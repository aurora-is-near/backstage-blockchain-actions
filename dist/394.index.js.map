{"version":3,"file":"394.index.js","mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC7FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC7FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjpFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://backstage-blockchain-actions/./src/core/access-key-collector.ts","webpack://backstage-blockchain-actions/./src/core/address-collector.ts","webpack://backstage-blockchain-actions/./src/core/base-collector.ts","webpack://backstage-blockchain-actions/./src/core/filtered-collector.ts","webpack://backstage-blockchain-actions/./src/core/multisigs-collector.ts","webpack://backstage-blockchain-actions/./src/core/rbac-collector.ts","webpack://backstage-blockchain-actions/./src/core/unknown-collector.ts","webpack://backstage-blockchain-actions/./src/helpers/backstage-export.ts","webpack://backstage-blockchain-actions/./src/utils/get-backstage-entities.ts","webpack://backstage-blockchain-actions/./src/utils/pick.ts"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AccessKeyCollector = void 0;\nconst catalog_model_1 = require(\"@backstage/catalog-model\");\nconst base_collector_1 = require(\"./base-collector\");\nclass AccessKeyCollector extends base_collector_1.BaseCollector {\n    collectSystems(opts) {\n        return this.getSystemEntities().reduce((acc, system) => {\n            if (opts.scope && system.spec?.owner !== opts.scope) {\n                return acc;\n            }\n            const components = this.collectComponents(system, opts);\n            if (components.some((c) => c.contracts?.length)) {\n                return [\n                    ...acc,\n                    {\n                        title: system.metadata.title || system.metadata.name,\n                        system,\n                        components,\n                    },\n                ];\n            }\n            return acc;\n        }, []);\n    }\n    collectComponents(system, opts = {}) {\n        const componentRefs = system.relations.filter((r) => r.type === catalog_model_1.RELATION_HAS_PART &&\n            (0, catalog_model_1.parseEntityRef)(r.targetRef).kind === \"component\");\n        return componentRefs\n            .reduce((acc, componentRef) => {\n            const component = this.entityCatalog[componentRef.targetRef];\n            if (opts.lifecycle && component.spec?.lifecycle !== opts.lifecycle) {\n                return acc;\n            }\n            const contracts = this.collectContracts(componentRef).filter((c) => c.keys && c.keys.length > 0);\n            if (contracts.length) {\n                return [\n                    ...acc,\n                    {\n                        title: component.metadata.title || component.metadata.name,\n                        component,\n                        contracts,\n                        tags: this.getEntityTags(component),\n                    },\n                ];\n            }\n            return acc;\n        }, [])\n            .sort((a, b) => a.component.metadata.name.localeCompare(b.component.metadata.name));\n    }\n    collectContracts(componentRef) {\n        return this.getApiEntities()\n            .filter((item) => item.spec?.type === \"contract-deployment\" &&\n            item.spec.network === \"near\" &&\n            item.spec.lifecycle === \"production\" &&\n            item.relations.some((r) => r.type === catalog_model_1.RELATION_API_PROVIDED_BY &&\n                r.targetRef === componentRef.targetRef))\n            .map((entity) => ({\n            entity,\n            keys: this.collectKeys(entity),\n            tags: this.getEntityTags(entity),\n        }));\n    }\n    collectKeys(contract) {\n        return contract\n            .relations.filter((r) => {\n            const keyEntity = this.entityCatalog[r.targetRef];\n            return (r.type === catalog_model_1.RELATION_API_CONSUMED_BY &&\n                (0, catalog_model_1.parseEntityRef)(r.targetRef).kind === \"resource\" &&\n                keyEntity &&\n                keyEntity.spec?.type === \"access-key\");\n        })\n            .reduce((acc, r) => {\n            const accessKey = this.entityCatalog[r.targetRef];\n            if (accessKey && accessKey.spec && accessKey.spec.owner) {\n                const ownerRef = (0, catalog_model_1.parseEntityRef)(accessKey.spec.owner);\n                const owner = this.entityCatalog[(0, catalog_model_1.stringifyEntityRef)(ownerRef)];\n                if (owner) {\n                    return [\n                        ...acc,\n                        {\n                            key: accessKey,\n                            owner,\n                            tags: this.getEntityTags(accessKey),\n                        },\n                    ];\n                }\n            }\n            return acc;\n        }, [])\n            .sort((a, b) => a.key.metadata.name.localeCompare(b.key.metadata.name));\n    }\n}\nexports.AccessKeyCollector = AccessKeyCollector;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AddressCollector = void 0;\nconst base_collector_1 = require(\"./base-collector\");\nconst catalog_model_1 = require(\"@backstage/catalog-model\");\nclass AddressCollector extends base_collector_1.BaseCollector {\n    collectAddresses(opts) {\n        return this.getResourceEntities()\n            .filter((entity) => (entity.spec?.type === \"signer-address\" ||\n            entity.spec?.type?.toString().includes(\"-address\")) &&\n            (opts.lifecycle ? entity.spec?.lifecycle === opts.lifecycle : true) &&\n            (opts.scope\n                ? entity.spec?.owner?.toString().includes(opts.scope)\n                : true))\n            .reduce((acc, signer) => {\n            const contracts = signer\n                .relations.filter((relation) => relation.type === catalog_model_1.RELATION_CONSUMES_API &&\n                this.entityCatalog[relation.targetRef] &&\n                this.entityCatalog[relation.targetRef].spec?.type ===\n                    \"contract-deployment\")\n                .map((relation) => this.entityCatalog[relation.targetRef]);\n            const roles = signer\n                .relations.filter((relation) => relation.type === catalog_model_1.RELATION_MEMBER_OF &&\n                this.entityCatalog[relation.targetRef] &&\n                this.entityCatalog[relation.targetRef].spec?.type ===\n                    \"role-group\")\n                .map((relation) => this.entityCatalog[relation.targetRef]);\n            const keys = signer\n                .relations.filter((relation) => relation.type === catalog_model_1.RELATION_OWNER_OF &&\n                this.entityCatalog[relation.targetRef] &&\n                this.entityCatalog[relation.targetRef].spec?.type ===\n                    \"access-key\")\n                .map((relation) => this.entityCatalog[relation.targetRef]);\n            return [...acc, { signer, contracts, roles, keys }];\n        }, [])\n            .filter((info) => info.keys?.length || info.contracts?.length || info.roles?.length);\n    }\n    collectMultiKeyAccounts(opts) {\n        // Get all mainnet signer addresses with valid metadata and relations\n        const signers = this.getResourceEntities().filter((entity) => entity.metadata?.name &&\n            entity.spec?.type === \"signer-address\" &&\n            entity.spec?.network === \"near\" &&\n            entity.spec?.networkType === \"mainnet\" &&\n            (opts.lifecycle ? entity.spec?.lifecycle === opts.lifecycle : true) &&\n            (!opts.scope ||\n                (typeof entity.spec?.owner?.toString() === \"string\" &&\n                    entity.spec.owner.toString().includes(opts.scope))));\n        // For each signer, collect their keys\n        const multiKeyAccounts = signers.reduce((acc, signer) => {\n            // Skip signers without relations\n            if (!signer.relations?.length) {\n                return acc;\n            }\n            const keys = signer.relations\n                .filter((r) => r.type === catalog_model_1.RELATION_API_CONSUMED_BY &&\n                r.targetRef && // ensure targetRef exists\n                (0, catalog_model_1.parseEntityRef)(r.targetRef).kind === \"resource\")\n                .map((r) => this.entityCatalog[r.targetRef])\n                .filter((key) => {\n                if (key === undefined)\n                    return false;\n                if (!key.metadata?.name)\n                    return false;\n                return key.spec?.type === \"access-key\";\n            });\n            // Only include accounts with multiple keys\n            if (keys.length > 1) {\n                const owner = signer.spec?.owner\n                    ? this.entityCatalog[signer.spec.owner.toString()]\n                    : undefined;\n                // Skip if owner exists but has no metadata\n                if (owner && !owner.metadata?.name) {\n                    return acc;\n                }\n                // Skip if owner is required but not found\n                if (!owner) {\n                    return acc;\n                }\n                return [\n                    ...acc,\n                    {\n                        signer,\n                        owner,\n                        keys,\n                        tags: this.getEntityTags(signer),\n                    },\n                ];\n            }\n            return acc;\n        }, []);\n        return multiKeyAccounts.sort((a, b) => (a.signer.metadata.name || \"\").localeCompare(b.signer.metadata.name || \"\"));\n    }\n}\nexports.AddressCollector = AddressCollector;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BaseCollector = void 0;\nconst catalog_model_1 = require(\"@backstage/catalog-model\");\nclass BaseCollector {\n    constructor(entities) {\n        this.entities = [];\n        this.entityCatalog = {};\n        this.entities = entities;\n        this.entityCatalog = entities.reduce((acc, e) => ({ ...acc, [(0, catalog_model_1.stringifyEntityRef)(e)]: e }), {});\n    }\n    getSystemEntities() {\n        return this.entities.filter(catalog_model_1.isSystemEntity).sort(this.sortByName);\n    }\n    getApiEntities() {\n        return this.entities.filter(catalog_model_1.isApiEntity).sort(this.sortByName);\n    }\n    getResourceEntities() {\n        return this.entities.filter(catalog_model_1.isResourceEntity).sort(this.sortByName);\n    }\n    getUserEntities() {\n        return this.entities.filter(catalog_model_1.isUserEntity).sort(this.sortByName);\n    }\n    getEntityTags(entity) {\n        return entity.metadata.tags || [];\n    }\n    sortByName(a, b) {\n        return a.metadata.name.localeCompare(b.metadata.name);\n    }\n}\nexports.BaseCollector = BaseCollector;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FilteredCollector = void 0;\nconst pick_1 = require(\"../utils/pick\");\nconst ALLOWED_KINDS = [\"Component\", \"System\", \"API\"];\nconst ALLOWED_SPEC_FIELDS = [\n    \"type\",\n    \"deployedAt\",\n    \"address\",\n    \"network\",\n    \"networkType\",\n];\nconst ALLOWED_METADATA_FIELDS = [\n    \"uid\",\n    \"namespace\",\n    \"name\",\n    \"title\",\n    \"annotations\",\n    \"tags\",\n];\nclass FilteredCollector {\n    constructor(entities, opts = {}) {\n        this.srcEntities = entities;\n        this.entities = this.filterEntities(opts);\n    }\n    filterSpec(spec) {\n        if (!spec)\n            return {};\n        return (0, pick_1.pick)(spec, ALLOWED_SPEC_FIELDS);\n    }\n    filterMetadata(metadata) {\n        return (0, pick_1.pick)(metadata, ALLOWED_METADATA_FIELDS);\n    }\n    filterEntities(opts) {\n        const source = opts.scope\n            ? this.srcEntities.filter((e) => e.spec?.owner === opts.scope)\n            : this.srcEntities;\n        return source\n            .filter((e) => ALLOWED_KINDS.includes(e.kind))\n            .map((e) => {\n            return {\n                apiVersion: e.apiVersion,\n                kind: e.kind,\n                metadata: this.filterMetadata(e.metadata),\n                spec: this.filterSpec(e.spec),\n            };\n        });\n    }\n}\nexports.FilteredCollector = FilteredCollector;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MultisigsCollector = void 0;\nconst catalog_model_1 = require(\"@backstage/catalog-model\");\nconst base_collector_1 = require(\"./base-collector\");\nclass MultisigsCollector extends base_collector_1.BaseCollector {\n    collectSystems(opts) {\n        return this.getSystemEntities()\n            .reduce((acc, system) => {\n            if (opts.scope && system.spec?.owner !== opts.scope) {\n                return acc;\n            }\n            const components = this.collectComponents(system, opts);\n            if (components.some((c) => c.multisigs?.length)) {\n                return [\n                    ...acc,\n                    {\n                        title: system.metadata.title || system.metadata.name,\n                        system,\n                        components,\n                    },\n                ];\n            }\n            return acc;\n        }, [])\n            .sort((a, b) => this.sortByName(a.system, b.system));\n    }\n    collectComponents(system, opts = {}) {\n        const componentRefs = system.relations.filter((r) => r.type === catalog_model_1.RELATION_HAS_PART &&\n            (0, catalog_model_1.parseEntityRef)(r.targetRef).kind === \"component\");\n        return componentRefs\n            .reduce((acc, componentRef) => {\n            const component = this.entityCatalog[componentRef.targetRef];\n            if (opts.lifecycle && component.spec?.lifecycle !== opts.lifecycle) {\n                return acc;\n            }\n            const multisigs = this.collectMultisigs(componentRef);\n            if (multisigs.length) {\n                return [\n                    ...acc,\n                    {\n                        title: component.metadata.title || component.metadata.name,\n                        component,\n                        multisigs,\n                        tags: this.getEntityTags(component),\n                    },\n                ];\n            }\n            return acc;\n        }, [])\n            .sort((a, b) => this.sortByName(a.component, b.component));\n    }\n    collectMultisigs(componentRef) {\n        return this.getApiEntities()\n            .filter((item) => item.relations.some((r) => item.spec?.type === \"multisig-deployment\" &&\n            r.type === catalog_model_1.RELATION_API_PROVIDED_BY &&\n            r.targetRef === componentRef.targetRef))\n            .map((entity) => ({\n            entity: entity,\n            signers: this.collectSigners(entity),\n            tags: this.getEntityTags(entity),\n        }));\n    }\n    collectSigners(multisig) {\n        return multisig\n            .relations.filter((r) => r.type === catalog_model_1.RELATION_OWNED_BY &&\n            (0, catalog_model_1.parseEntityRef)(r.targetRef).kind !== \"group\")\n            .map((r) => {\n            const signer = this.entityCatalog[r.targetRef];\n            const owner = this.entityCatalog[signer.spec.owner.toString()];\n            return {\n                signer,\n                owner,\n                tags: this.getEntityTags(signer),\n            };\n        })\n            .sort((a, b) => this.sortByName(a.owner, b.owner));\n    }\n}\nexports.MultisigsCollector = MultisigsCollector;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RbacCollector = void 0;\nconst catalog_model_1 = require(\"@backstage/catalog-model\");\nconst base_collector_1 = require(\"./base-collector\");\nclass RbacCollector extends base_collector_1.BaseCollector {\n    collectSystems(opts) {\n        return this.getSystemEntities().reduce((acc, system) => {\n            if (opts.scope && system.spec?.owner !== opts.scope) {\n                return acc;\n            }\n            const components = this.collectComponents(system, opts);\n            if (components.some((c) => c.contracts?.length)) {\n                return [\n                    ...acc,\n                    {\n                        title: system.metadata.title || system.metadata.name,\n                        system,\n                        components,\n                    },\n                ];\n            }\n            return acc;\n        }, []);\n    }\n    collectComponents(system, opts = {}) {\n        const componentRefs = system.relations.filter((r) => r.type === catalog_model_1.RELATION_HAS_PART &&\n            (0, catalog_model_1.parseEntityRef)(r.targetRef).kind === \"component\");\n        return componentRefs\n            .reduce((acc, componentRef) => {\n            const component = this.entityCatalog[componentRef.targetRef];\n            if (opts.lifecycle && component.spec?.lifecycle !== opts.lifecycle) {\n                return acc;\n            }\n            const contracts = this.collectContracts(componentRef);\n            if (contracts.length) {\n                return [\n                    ...acc,\n                    {\n                        title: component.metadata.title || component.metadata.name,\n                        component,\n                        contracts,\n                        tags: this.getEntityTags(component),\n                    },\n                ];\n            }\n            return acc;\n        }, [])\n            .sort((a, b) => a.component.metadata.name.localeCompare(b.component.metadata.name));\n    }\n    collectContracts(componentRef) {\n        return this.getApiEntities()\n            .filter((item) => item.spec?.type === \"contract-deployment\" &&\n            item.spec.lifecycle === \"production\" &&\n            item.metadata.tags?.includes(\"rbac\") &&\n            item.relations.some((r) => r.type === catalog_model_1.RELATION_API_PROVIDED_BY &&\n                r.targetRef === componentRef.targetRef))\n            .map((entity) => ({\n            entity,\n            admins: this.collectAdmins(entity),\n            roles: this.collectRoles(entity),\n            tags: this.getEntityTags(entity),\n        }));\n    }\n    collectRoles(contract) {\n        return contract\n            .relations.filter((r) => r.type === catalog_model_1.RELATION_DEPENDS_ON &&\n            (0, catalog_model_1.parseEntityRef)(r.targetRef).kind === \"api\")\n            .reduce((acc, r) => {\n            const roleGroup = this.entityCatalog[r.targetRef];\n            if (roleGroup &&\n                roleGroup.spec &&\n                roleGroup.spec.members &&\n                roleGroup.spec.roleId !== roleGroup.spec.admin) {\n                const specMembers = roleGroup.spec.members;\n                const members = specMembers.reduce((accMembers, m) => {\n                    const member = this.entities.find((e) => e.spec &&\n                        // filter out role-groups since they are modeled with\n                        // the same fields as a blockchain address\n                        e.spec.type !== \"role-group\" &&\n                        e.spec.address?.toString().toLowerCase() === m &&\n                        e.spec.network === roleGroup.spec?.network &&\n                        e.spec.networkType === roleGroup.spec?.networkType);\n                    if (member) {\n                        const ownerRef = (0, catalog_model_1.parseEntityRef)(member.spec?.owner);\n                        const owner = this.entityCatalog[(0, catalog_model_1.stringifyEntityRef)(ownerRef)];\n                        return [...accMembers, { member, owner }];\n                    }\n                    return accMembers;\n                }, []);\n                return [...acc, { role: roleGroup, members }];\n            }\n            return acc;\n        }, [])\n            .sort((a, b) => a.role.metadata.name.localeCompare(b.role.metadata.name));\n    }\n    collectAdmins(contract) {\n        return contract\n            .relations.filter((r) => r.type === catalog_model_1.RELATION_DEPENDS_ON &&\n            (0, catalog_model_1.parseEntityRef)(r.targetRef).kind === \"api\")\n            .reduce((acc, r) => {\n            const roleGroup = this.entityCatalog[r.targetRef];\n            if (roleGroup && roleGroup.spec?.roleId === roleGroup.spec?.admin) {\n                const specMembers = roleGroup.spec?.members;\n                const members = specMembers.reduce((accMembers, m) => {\n                    const member = this.entities.find((e) => e.spec &&\n                        // filter out role-groups since they are modeled with\n                        // the same fields as a blockchain address\n                        e.spec.type !== \"role-group\" &&\n                        e.spec.address?.toString().toLowerCase() === m &&\n                        e.spec.network === roleGroup.spec?.network &&\n                        e.spec.networkType === roleGroup.spec?.networkType);\n                    if (member) {\n                        const ownerRef = (0, catalog_model_1.parseEntityRef)(member.spec?.owner);\n                        const owner = this.entityCatalog[(0, catalog_model_1.stringifyEntityRef)(ownerRef)];\n                        return [...accMembers, { member, owner }];\n                    }\n                    return accMembers;\n                }, []);\n                return [...acc, { adminRole: roleGroup, members }];\n            }\n            return acc;\n        }, [])\n            .sort((a, b) => this.sortByName(a.adminRole, b.adminRole));\n    }\n}\nexports.RbacCollector = RbacCollector;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UnknownCollector = void 0;\nconst access_key_collector_1 = require(\"./access-key-collector\");\nconst multisigs_collector_1 = require(\"./multisigs-collector\");\nconst rbac_collector_1 = require(\"./rbac-collector\");\nclass UnknownCollector {\n    constructor(entities) {\n        this.entities = [];\n        this.entities = entities;\n    }\n    collectEntities(opts = {}) {\n        const accessKeyCollector = new access_key_collector_1.AccessKeyCollector(this.entities);\n        const multisigCollector = new multisigs_collector_1.MultisigsCollector(this.entities);\n        const rbacCollector = new rbac_collector_1.RbacCollector(this.entities);\n        const unknownMultisigs = multisigCollector\n            .collectSystems(opts)\n            .reduce((acc, system) => {\n            return [\n                ...acc,\n                {\n                    ...system,\n                    components: system.components\n                        .map((component) => {\n                        return {\n                            ...component,\n                            multisigs: component.multisigs &&\n                                component.multisigs.filter((multisig) => multisig.signers.some((info) => info.signer.metadata.namespace === \"stub\")),\n                        };\n                    })\n                        .filter((component) => component.multisigs &&\n                        component.multisigs.some((multisig) => multisig.signers.some((info) => info.signer.metadata.namespace === \"stub\"))),\n                },\n            ];\n        }, [])\n            .filter((system) => system.components.length > 0);\n        const unknownRbac = rbacCollector\n            .collectSystems(opts)\n            .reduce((acc, system) => {\n            return [\n                ...acc,\n                {\n                    ...system,\n                    components: system.components\n                        .map((component) => {\n                        return {\n                            ...component,\n                            contracts: component.contracts &&\n                                component.contracts.filter((contract) => contract.roles &&\n                                    contract.roles.some((role) => role.members.some((info) => info.member.metadata.namespace === \"stub\"))),\n                        };\n                    })\n                        .filter((component) => component.contracts &&\n                        component.contracts.some((contract) => contract.roles &&\n                            contract.roles.some((role) => role.members.some((info) => info.member.metadata.namespace === \"stub\")))),\n                },\n            ];\n        }, [])\n            .filter((system) => system.components.length > 0);\n        const unknownAccessKeys = accessKeyCollector\n            .collectSystems(opts)\n            .reduce((acc, system) => {\n            return [\n                ...acc,\n                {\n                    ...system,\n                    components: system.components.filter((component) => component.contracts &&\n                        component.contracts.some((contract) => contract.keys &&\n                            contract.keys.some((info) => info.key.metadata.namespace === \"stub\"))),\n                },\n            ];\n        }, [])\n            .filter((system) => system.components.length > 0);\n        return [...unknownAccessKeys, ...unknownRbac, ...unknownMultisigs];\n    }\n}\nexports.UnknownCollector = UnknownCollector;\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.backstageExport = exports.BackstageExport = void 0;\nconst core = __importStar(require(\"@actions/core\"));\nconst glob_1 = require(\"glob\");\nconst fs_1 = __importDefault(require(\"fs\"));\nconst handlebars_1 = __importDefault(require(\"handlebars\"));\nconst multisigs_collector_1 = require(\"../core/multisigs-collector\");\nconst filtered_collector_1 = require(\"../core/filtered-collector\");\nconst rbac_collector_1 = require(\"../core/rbac-collector\");\nconst access_key_collector_1 = require(\"../core/access-key-collector\");\nconst unknown_collector_1 = require(\"../core/unknown-collector\");\nconst address_collector_1 = require(\"../core/address-collector\");\nconst get_backstage_entities_1 = require(\"../utils/get-backstage-entities\");\nclass BackstageExport {\n    constructor() {\n        this.template_path = \"\";\n        this.output_path = \"\";\n    }\n}\nexports.BackstageExport = BackstageExport;\nconst backstageExport = async ({ backstage_url, backstage_entities_repo, template_path, output_path, scope, lifecycle, testing, }) => {\n    if (!template_path || !output_path) {\n        throw new Error(\"set template_path and output_path for handlebars templating\");\n    }\n    const entities = await (0, get_backstage_entities_1.getBackstageEntities)({\n        backstage_url,\n        backstage_entities_repo,\n    });\n    const filteredCollector = new filtered_collector_1.FilteredCollector(entities, {\n        scope,\n        lifecycle,\n    });\n    const multisigsCollector = new multisigs_collector_1.MultisigsCollector(entities);\n    const rbacCollector = new rbac_collector_1.RbacCollector(entities);\n    const accessKeyCollector = new access_key_collector_1.AccessKeyCollector(entities);\n    const unknownCollector = new unknown_collector_1.UnknownCollector(entities);\n    const addressCollector = new address_collector_1.AddressCollector(entities);\n    const changedFiles = (0, glob_1.sync)(`${template_path}**/*.hbs`).reduce((acc, templatePath) => {\n        const templateData = {\n            multisigSystemComponents: multisigsCollector.collectSystems({\n                scope,\n                lifecycle,\n            }),\n            contractSystemComponents: rbacCollector.collectSystems({\n                scope,\n                lifecycle,\n            }),\n            accessKeySystemComponents: accessKeyCollector.collectSystems({\n                scope,\n                lifecycle,\n            }),\n            unknownSystemComponents: unknownCollector.collectEntities({\n                scope,\n                lifecycle,\n            }),\n            addresses: addressCollector.collectAddresses({ scope, lifecycle }),\n            multiKeyAccounts: addressCollector.collectMultiKeyAccounts({\n                scope,\n                lifecycle,\n            }),\n            filteredEntities: JSON.stringify(filteredCollector.entities, null, 2),\n            testing,\n        };\n        if (reexportTemplate({\n            backstage_url,\n            output_path,\n            template_path,\n            templatePath,\n            templateData,\n        })) {\n            return [templatePath, ...acc];\n        }\n        return acc;\n    }, []);\n    const hasChangedFiles = changedFiles.length !== 0;\n    if (hasChangedFiles) {\n        core.info(`${changedFiles.length} changed files`);\n    }\n    else {\n        core.info(\"No changed files\");\n    }\n    return testing ? true : hasChangedFiles;\n};\nexports.backstageExport = backstageExport;\nfunction reexportTemplate(inputs) {\n    const outputPath = inputs.output_path +\n        inputs.templatePath.replace(inputs.template_path, \"\").replace(\".hbs\", \"\");\n    const compiledTemplate = handlebars_1.default.compile(fs_1.default.readFileSync(inputs.templatePath, { encoding: \"utf8\" }), {\n        strict: true,\n    });\n    const options = {\n        helpers: {\n            backstageLink: (entity) => {\n                if (!entity)\n                    return \"undefined\";\n                const md = entity.metadata;\n                return `${inputs.backstage_url}/catalog/${md.namespace}/${entity.kind}/${md.name}`;\n            },\n            title: (entity) => {\n                if (!entity || !entity.metadata)\n                    return \"undefined\";\n                return entity.metadata.title || entity.metadata.name || \"undefined\";\n            },\n        },\n    };\n    const compiledContent = compiledTemplate(inputs.templateData, options);\n    const existingContent = fs_1.default.existsSync(outputPath) &&\n        fs_1.default.readFileSync(outputPath, {\n            encoding: \"utf-8\",\n        });\n    if (compiledContent !== existingContent) {\n        core.info(`Writing ${outputPath}: changed content`);\n        fs_1.default.writeFileSync(outputPath, compiledContent);\n        return true;\n    }\n    return false;\n}\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getBackstageEntities = void 0;\nconst core = __importStar(require(\"@actions/core\"));\nconst catalog_client_1 = require(\"@backstage/catalog-client\");\nconst simple_git_1 = require(\"simple-git\");\nconst getBackstageEntities = async ({ backstage_url: backstageUrl, backstage_entities_repo: backstageEntitiesRepo, }) => {\n    if (backstageUrl) {\n        try {\n            return fetchBackstageEntitiesFromURL(backstageUrl);\n        }\n        catch (err) {\n            /* empty */\n        }\n    }\n    // repo used as fallback to the URL in order to avoid unnecessary runtime\n    // dependency\n    if (backstageEntitiesRepo) {\n        return fetchBackstageEntitiesFromRepo(backstageEntitiesRepo);\n    }\n    throw new Error(\"Backstage URL or entities repo is required. Set BACKSTAGE_URL (github secret) or pass backstage_entities_repo argument to this action\");\n};\nexports.getBackstageEntities = getBackstageEntities;\nasync function getFileContentFromRepo(repoUrl, filePath) {\n    const cloneDir = `/tmp/github-helpers-${Date.now()}`;\n    const git = (0, simple_git_1.simpleGit)();\n    try {\n        await git.clone(repoUrl, cloneDir, [\"--depth=1\"]);\n        await git.cwd(cloneDir);\n        const { current } = await git.branch();\n        const defaultBranch = current || \"main\";\n        const fileContent = await git.show([\n            `${defaultBranch}:${filePath}`,\n        ]);\n        await git.raw([\"rm\", \"-rf\", \".\"]);\n        return fileContent;\n    }\n    catch (error) {\n        throw new Error(`Failed to fetch ${repoUrl}/${filePath}: ${error}`);\n    }\n}\nasync function fetchBackstageEntitiesFromURL(backstageUrl) {\n    core.info(\"Connecting to Backstage to fetch available entities\");\n    const discoveryApi = {\n        async getBaseUrl() {\n            return `${backstageUrl}/api/catalog`;\n        },\n    };\n    const catalogClient = new catalog_client_1.CatalogClient({\n        discoveryApi,\n    });\n    const entities = await catalogClient.getEntities({});\n    core.info(`Total backstage entities: ${entities.items.length}`);\n    return entities.items;\n}\nasync function fetchBackstageEntitiesFromRepo(backstageEntitiesRepo) {\n    const serverUrl = process.env.GITHUB_SERVER_URL || \"https://github.com\";\n    const repoUrl = `${serverUrl}/${backstageEntitiesRepo}`;\n    core.info(`Cloning ${repoUrl}`);\n    const content = await getFileContentFromRepo(repoUrl, \"filteredEntities.json\");\n    return JSON.parse(content);\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.pick = void 0;\nfunction getNestedValue(obj, key) {\n    return key\n        .split(\".\")\n        .reduce((o, k) => o && typeof o === \"object\" && k in o\n        ? o[k]\n        : undefined, obj);\n}\nfunction setNestedValue(obj, path, value) {\n    const keys = path.split(\".\");\n    let current = obj;\n    for (let i = 0; i < keys.length - 1; i++) {\n        const key = keys[i];\n        if (key === \"__proto__\" || key === \"constructor\" || key === \"prototype\") {\n            return;\n        }\n        if (typeof current === \"object\" && current !== null && !(key in current)) {\n            current[key] = {};\n        }\n        current = current[key];\n    }\n    const lastKey = keys[keys.length - 1];\n    if (lastKey === \"__proto__\" ||\n        lastKey === \"constructor\" ||\n        lastKey === \"prototype\") {\n        return;\n    }\n    if (typeof current === \"object\" && current !== null) {\n        current[keys[keys.length - 1]] = value;\n    }\n}\nfunction pick(obj, whitelist) {\n    return whitelist.reduce((newObj, key) => {\n        const value = getNestedValue(obj, key);\n        if (value !== undefined) {\n            setNestedValue(newObj, key, value);\n        }\n        return newObj;\n    }, {});\n}\nexports.pick = pick;\n"],"names":[],"sourceRoot":""}