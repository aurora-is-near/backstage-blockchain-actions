{"version":3,"file":"394.index.js","mappingsjGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AClvhIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://backstage-blockchain-actions/./src/core/access-key-collector.ts","webpack://backstage-blockchain-actions/./src/core/filtered-collector.ts","webpack://backstage-blockchain-actions/./src/core/multisigs-collector.ts","webpack://backstage-blockchain-actions/./src/core/pick.ts","webpack://backstage-blockchain-actions/./src/core/rbac-collector.ts","webpack://backstage-blockchain-actions/./src/helpers/backstage-export.ts","webpack://backstage-blockchain-actions/./src/utils/get-backstage-entities.ts"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AccessKeyCollector = void 0;\nconst catalog_model_1 = require(\"@backstage/catalog-model\");\nclass AccessKeyCollector {\n    constructor(entities, opts = {}) {\n        this.systemComponents = [];\n        this.entities = [];\n        this.contracts = [];\n        this.accessKeys = [];\n        this.entities = entities;\n        const apiEntities = this.entities.filter(catalog_model_1.isApiEntity);\n        const resourceEntities = this.entities.filter(catalog_model_1.isResourceEntity);\n        this.contracts = apiEntities.filter((item) => item.spec?.type === \"contract-deployment\");\n        this.accessKeys = resourceEntities.filter((item) => item.spec?.type === \"access-key\");\n        this.systemComponents = this.collectSystems(opts);\n    }\n    normalizeEntities(list) {\n        return [...new Set(list)].sort((a, b) => a.localeCompare(b));\n    }\n    collectSystems(opts) {\n        const systemRefs = this.normalizeEntities(this.contracts\n            .filter((c) => !!c.spec?.system)\n            .map((c) => c.spec.system));\n        return systemRefs\n            .reduce((acc, systemRef) => {\n            const system = this.entities.find((item) => (0, catalog_model_1.stringifyEntityRef)(item) === systemRef);\n            if (opts.scope && system.spec?.owner !== opts.scope) {\n                return acc;\n            }\n            const components = this.collectComponents(system);\n            if (components.some((c) => c.contracts.length)) {\n                return [\n                    ...acc,\n                    {\n                        title: system.metadata.title || system.metadata.name,\n                        system,\n                        components,\n                    },\n                ];\n            }\n            return acc;\n        }, [])\n            .sort((a, b) => a.system.metadata.name.localeCompare(b.system.metadata.name));\n    }\n    collectComponents(system) {\n        const componentRefs = system.relations.filter((r) => r.type === catalog_model_1.RELATION_HAS_PART &&\n            (0, catalog_model_1.parseEntityRef)(r.targetRef).kind === \"component\");\n        return componentRefs\n            .reduce((acc, componentRef) => {\n            const component = this.entities.find((item) => (0, catalog_model_1.stringifyEntityRef)(item) === componentRef.targetRef);\n            const contracts = this.collectContracts(componentRef).filter((c) => c.keys.length > 0);\n            if (contracts.length) {\n                return [\n                    ...acc,\n                    {\n                        title: component.metadata.title || component.metadata.name,\n                        component,\n                        contracts,\n                    },\n                ];\n            }\n            return acc;\n        }, [])\n            .sort((a, b) => a.component.metadata.name.localeCompare(b.component.metadata.name));\n    }\n    collectContracts(componentRef) {\n        return this.contracts\n            .filter((item) => item.relations.some((r) => r.type === catalog_model_1.RELATION_API_PROVIDED_BY &&\n            r.targetRef === componentRef.targetRef) &&\n            item.spec?.network === \"near\" &&\n            // item.spec.nearKeys &&\n            // ((item.spec.nearKeys as JsonObject).keys as JsonArray).length > 0 &&\n            item.spec?.lifecycle === \"production\")\n            .map((entity) => ({\n            entity,\n            keys: this.collectKeys(entity),\n        }));\n    }\n    collectKeys(contract) {\n        return contract\n            .relations.filter((r) => r.type === catalog_model_1.RELATION_API_CONSUMED_BY &&\n            (0, catalog_model_1.parseEntityRef)(r.targetRef).kind === \"resource\")\n            .reduce((acc, r) => {\n            const accessKey = this.accessKeys.find((e) => (0, catalog_model_1.stringifyEntityRef)(e) === r.targetRef);\n            if (accessKey && accessKey.spec && accessKey.spec.owner) {\n                const ownerRef = (0, catalog_model_1.parseEntityRef)(accessKey.spec.owner);\n                const owner = this.entities.find((e) => e.metadata.name === ownerRef.name);\n                if (owner) {\n                    return [...acc, { key: accessKey, owner }];\n                }\n            }\n            return acc;\n        }, [])\n            .sort((a, b) => a.key.metadata.name.localeCompare(b.key.metadata.name));\n    }\n}\nexports.AccessKeyCollector = AccessKeyCollector;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FilteredCollector = void 0;\nconst pick_1 = require(\"./pick\");\nconst ALLOWED_KINDS = [\"Component\", \"System\", \"API\"];\nconst ALLOWED_SPEC_FIELDS = [\n    \"type\",\n    \"deployedAt\",\n    \"address\",\n    \"network\",\n    \"networkType\",\n    \"deployment.source.startBlock\",\n];\nconst ALLOWED_METADATA_FIELDS = [\n    \"uid\",\n    \"namespace\",\n    \"name\",\n    \"title\",\n    \"annotations\",\n    \"tags\",\n];\nclass FilteredCollector {\n    constructor(entities, opts = {}) {\n        this.srcEntities = entities;\n        this.entities = this.filterEntities(opts);\n    }\n    filterSpec(spec) {\n        if (!spec)\n            return {};\n        return (0, pick_1.pick)(spec, ALLOWED_SPEC_FIELDS);\n    }\n    filterMetadata(metadata) {\n        return (0, pick_1.pick)(metadata, ALLOWED_METADATA_FIELDS);\n    }\n    filterEntities(opts) {\n        const source = opts.scope\n            ? this.srcEntities.filter((e) => e.spec?.owner === opts.scope)\n            : this.srcEntities;\n        return source\n            .filter((e) => ALLOWED_KINDS.includes(e.kind))\n            .map((e) => {\n            return {\n                apiVersion: e.apiVersion,\n                kind: e.kind,\n                metadata: this.filterMetadata(e.metadata),\n                spec: this.filterSpec(e.spec),\n            };\n        });\n    }\n}\nexports.FilteredCollector = FilteredCollector;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MultisigsCollector = void 0;\nconst catalog_model_1 = require(\"@backstage/catalog-model\");\nclass MultisigsCollector {\n    constructor(entities, opts = {}) {\n        this.systemComponents = [];\n        this.entities = [];\n        this.apiEntities = [];\n        this.resourceEntities = [];\n        this.multisigs = [];\n        this.contracts = [];\n        this.accessKeys = [];\n        this.entities = entities;\n        this.apiEntities = this.entities.filter(catalog_model_1.isApiEntity);\n        this.resourceEntities = this.entities.filter(catalog_model_1.isResourceEntity);\n        this.multisigs = this.apiEntities.filter((item) => item.spec?.type === \"multisig-deployment\");\n        this.contracts = this.apiEntities.filter((item) => item.spec?.type === \"contract-deployment\");\n        this.accessKeys = this.resourceEntities.filter((item) => item.spec?.type === \"access-key\");\n        this.systemComponents = this.collectSystems(opts);\n    }\n    normalizeEntities(list) {\n        return [...new Set(list)].sort((a, b) => a.localeCompare(b));\n    }\n    collectSystems(opts) {\n        const systemRefs = this.normalizeEntities(this.multisigs.map((item) => item.spec.system));\n        return systemRefs\n            .reduce((acc, systemRef) => {\n            const system = this.entities.find((item) => (0, catalog_model_1.stringifyEntityRef)(item) === systemRef);\n            if (opts.scope && system.spec?.owner !== opts.scope) {\n                return acc;\n            }\n            const components = this.collectComponents(system);\n            return [\n                ...acc,\n                {\n                    title: system.metadata.title || system.metadata.name,\n                    system,\n                    components,\n                },\n            ];\n        }, [])\n            .sort((a, b) => a.system.metadata.name.localeCompare(b.system.metadata.name));\n    }\n    collectComponents(system) {\n        const componentRefs = system.relations.filter((r) => r.type === catalog_model_1.RELATION_HAS_PART &&\n            (0, catalog_model_1.parseEntityRef)(r.targetRef).kind === \"component\");\n        return componentRefs\n            .map((componentRef) => {\n            const component = this.entities.find((item) => (0, catalog_model_1.stringifyEntityRef)(item) === componentRef.targetRef);\n            return {\n                title: component.metadata.title || component.metadata.name,\n                component,\n                multisigs: this.multisigs\n                    .filter((item) => item.relations.some((r) => r.type === \"apiProvidedBy\" &&\n                    r.targetRef === componentRef.targetRef))\n                    .map((ms) => ({\n                    entity: ms,\n                    signers: this.collectSigners(ms),\n                })),\n            };\n        })\n            .sort((a, b) => a.component.metadata.name.localeCompare(b.component.metadata.name));\n    }\n    collectSigners(multisig) {\n        return multisig\n            .relations.filter((r) => r.type === catalog_model_1.RELATION_OWNED_BY &&\n            (0, catalog_model_1.parseEntityRef)(r.targetRef).kind !== \"group\")\n            .map((r) => {\n            const signer = this.entities.find((e) => (0, catalog_model_1.stringifyEntityRef)(e) === r.targetRef);\n            const owner = this.entities.find((e) => (0, catalog_model_1.stringifyEntityRef)(e) === signer.spec.owner);\n            return {\n                signer,\n                owner,\n            };\n        })\n            .sort((a, b) => a.owner.metadata.name.localeCompare(b.owner.metadata.name));\n    }\n    getAllApis() {\n        return this.apiEntities;\n    }\n    getAllResources() {\n        return this.resourceEntities;\n    }\n    getMultisigs() {\n        return this.systemComponents.flatMap((system) => system.components.flatMap((component) => component.multisigs));\n    }\n    getNearContracts() {\n        return this.contracts.filter((entity) => entity.spec?.network === \"near\");\n    }\n    getSigners() {\n        const allSigners = this.getMultisigs().flatMap((ms) => ms.signers);\n        const uniqueSigners = allSigners.reduce((acc, signer) => {\n            const uid = signer.signer.metadata.uid;\n            if (uid && uid in allSigners) {\n                return acc;\n            }\n            if (!this.isQualifiedEntity(signer.signer)) {\n                return acc;\n            }\n            return { ...acc, [uid]: signer };\n        }, {});\n        return Object.values(uniqueSigners);\n    }\n    getMultisigAccessKeys() {\n        const signers = this.getSigners().filter((value) => value.signer.spec?.network === \"near\");\n        const keys = signers.flatMap((value) => {\n            if (!value.signer.relations) {\n                return [];\n            }\n            return value.signer.relations\n                .filter((r) => r.type === catalog_model_1.RELATION_API_CONSUMED_BY &&\n                (0, catalog_model_1.parseEntityRef)(r.targetRef).kind === \"resource\")\n                .map((relation) => {\n                const key = this.entities.find((e) => (0, catalog_model_1.stringifyEntityRef)(e) === relation.targetRef);\n                return key;\n            });\n        });\n        return keys.filter(this.isEntity).filter(this.isQualifiedEntity);\n    }\n    getAccessKeysPerSigner() {\n        const signers = this.getSigners().filter((value) => value.signer.spec?.network === \"near\");\n        const keysPerSigner = signers.reduce((acc, value) => {\n            if (!value.signer.relations) {\n                return acc;\n            }\n            const spec = JSON.parse(JSON.stringify(value.signer.spec));\n            const signer = spec.address;\n            const keys = value.signer.relations\n                .filter((r) => r.type === catalog_model_1.RELATION_API_CONSUMED_BY &&\n                (0, catalog_model_1.parseEntityRef)(r.targetRef).kind === \"resource\")\n                .map((relation) => {\n                const key = this.entities.find((e) => (0, catalog_model_1.stringifyEntityRef)(e) === relation.targetRef);\n                return key;\n            })\n                .filter(this.isEntity);\n            return {\n                ...acc,\n                [signer]: {\n                    owner: value.owner,\n                    signer: value.signer,\n                    keys,\n                },\n            };\n        }, {});\n        return keysPerSigner;\n    }\n    getContractAccessKeys() {\n        const keys = this.contracts.flatMap((value) => {\n            if (!value.relations) {\n                return [];\n            }\n            return value.relations\n                .filter((r) => r.type === catalog_model_1.RELATION_API_CONSUMED_BY &&\n                (0, catalog_model_1.parseEntityRef)(r.targetRef).kind === \"resource\")\n                .map((relation) => {\n                const key = this.entities.find((e) => (0, catalog_model_1.stringifyEntityRef)(e) === relation.targetRef);\n                return key;\n            });\n        });\n        return keys.filter(this.isEntity);\n    }\n    getAllAccessKeys() {\n        return this.accessKeys;\n    }\n    getDeprecatedAccessKeys() {\n        const keys = this.getAllAccessKeys();\n        const deprecated = keys.filter((entity) => entity.metadata.tags?.includes(\"deprecated\"));\n        return deprecated;\n    }\n    getUnknownAccessKeys() {\n        const keys = this.getAllAccessKeys();\n        const unknown = keys.filter((entity) => entity.metadata.tags?.includes(\"unknown\"));\n        return unknown;\n    }\n    isQualifiedEntity(entity) {\n        return (!entity.metadata.tags?.includes(\"retired\") &&\n            !entity.metadata.tags?.includes(\"allow-unknown\"));\n    }\n    isEntity(entity) {\n        return entity !== undefined;\n    }\n}\nexports.MultisigsCollector = MultisigsCollector;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.pick = void 0;\nfunction getNestedValue(obj, key) {\n    return key\n        .split(\".\")\n        .reduce((o, k) => o && typeof o === \"object\" && k in o\n        ? o[k]\n        : undefined, obj);\n}\nfunction setNestedValue(obj, path, value) {\n    const keys = path.split(\".\");\n    let current = obj;\n    for (let i = 0; i < keys.length - 1; i++) {\n        const key = keys[i];\n        if (key === \"__proto__\" || key === \"constructor\" || key === \"prototype\") {\n            return;\n        }\n        if (typeof current === \"object\" && current !== null && !(key in current)) {\n            current[key] = {};\n        }\n        current = current[key];\n    }\n    const lastKey = keys[keys.length - 1];\n    if (lastKey === \"__proto__\" ||\n        lastKey === \"constructor\" ||\n        lastKey === \"prototype\") {\n        return;\n    }\n    if (typeof current === \"object\" && current !== null) {\n        current[keys[keys.length - 1]] = value;\n    }\n}\nfunction pick(obj, whitelist) {\n    return whitelist.reduce((newObj, key) => {\n        const value = getNestedValue(obj, key);\n        if (value !== undefined) {\n            setNestedValue(newObj, key, value);\n        }\n        return newObj;\n    }, {});\n}\nexports.pick = pick;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RbacCollector = void 0;\nconst catalog_model_1 = require(\"@backstage/catalog-model\");\nclass RbacCollector {\n    constructor(entities, opts = {}) {\n        this.systemComponents = [];\n        this.entities = [];\n        this.contracts = [];\n        this.roleGroups = [];\n        this.entities = entities;\n        const apiEntities = this.entities.filter(catalog_model_1.isApiEntity);\n        this.contracts = apiEntities.filter((item) => item.spec?.type === \"contract-deployment\");\n        this.roleGroups = apiEntities.filter((item) => item.spec?.type === \"role-group\");\n        this.systemComponents = this.collectSystems(opts);\n    }\n    normalizeEntities(list) {\n        return [...new Set(list)].sort((a, b) => a.localeCompare(b));\n    }\n    collectSystems(opts) {\n        const systemRefs = this.normalizeEntities(this.contracts\n            .filter((c) => !!c.spec?.system)\n            .map((c) => c.spec.system));\n        return systemRefs\n            .reduce((acc, systemRef) => {\n            const system = this.entities.find((item) => (0, catalog_model_1.stringifyEntityRef)(item) === systemRef);\n            if (opts.scope && system.spec?.owner !== opts.scope) {\n                return acc;\n            }\n            const components = this.collectComponents(system);\n            if (components.some((c) => c.contracts.length)) {\n                return [\n                    ...acc,\n                    {\n                        title: system.metadata.title || system.metadata.name,\n                        system,\n                        components,\n                    },\n                ];\n            }\n            return acc;\n        }, [])\n            .sort((a, b) => a.system.metadata.name.localeCompare(b.system.metadata.name));\n    }\n    collectComponents(system) {\n        const componentRefs = system.relations.filter((r) => r.type === catalog_model_1.RELATION_HAS_PART &&\n            (0, catalog_model_1.parseEntityRef)(r.targetRef).kind === \"component\");\n        return componentRefs\n            .reduce((acc, componentRef) => {\n            const component = this.entities.find((item) => (0, catalog_model_1.stringifyEntityRef)(item) === componentRef.targetRef);\n            const contracts = this.collectContracts(componentRef);\n            if (contracts.length) {\n                return [\n                    ...acc,\n                    {\n                        title: component.metadata.title || component.metadata.name,\n                        component,\n                        contracts,\n                    },\n                ];\n            }\n            return acc;\n        }, [])\n            .sort((a, b) => a.component.metadata.name.localeCompare(b.component.metadata.name));\n    }\n    collectContracts(componentRef) {\n        return this.contracts\n            .filter((item) => item.relations.some((r) => r.type === catalog_model_1.RELATION_API_PROVIDED_BY &&\n            r.targetRef === componentRef.targetRef) &&\n            item.metadata.tags?.includes(\"rbac\") &&\n            item.spec?.lifecycle === \"production\")\n            .map((entity) => ({\n            entity,\n            roles: this.collectRoles(entity),\n        }));\n    }\n    collectRoles(contract) {\n        return contract\n            .relations.filter((r) => r.type === catalog_model_1.RELATION_DEPENDS_ON &&\n            (0, catalog_model_1.parseEntityRef)(r.targetRef).kind === \"api\")\n            .reduce((acc, r) => {\n            const roleGroup = this.roleGroups.find((e) => (0, catalog_model_1.stringifyEntityRef)(e) === r.targetRef);\n            if (roleGroup && roleGroup.spec && roleGroup.spec.members) {\n                const specMembers = roleGroup.spec.members;\n                const members = specMembers.reduce((accMembers, m) => {\n                    const member = this.entities.find((e) => e.spec?.type &&\n                        // filter out role-groups since they are modeled with\n                        // the same fields as a blockchain address\n                        e.spec.type.toString() !== \"role-group\" &&\n                        e.spec.address?.toString().toLowerCase() === m &&\n                        e.spec.network === roleGroup.spec?.network &&\n                        e.spec.networkType === roleGroup.spec?.networkType);\n                    if (member) {\n                        const ownerRef = (0, catalog_model_1.parseEntityRef)(member.spec?.owner);\n                        const owner = this.entities.find((e) => e.metadata.name === ownerRef.name);\n                        return [...accMembers, { member, owner }];\n                    }\n                    return accMembers;\n                }, []);\n                return [...acc, { role: roleGroup, members }];\n            }\n            return acc;\n        }, [])\n            .sort((a, b) => a.role.metadata.name.localeCompare(b.role.metadata.name));\n    }\n}\nexports.RbacCollector = RbacCollector;\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.backstageExport = exports.BackstageExport = void 0;\nconst core = __importStar(require(\"@actions/core\"));\nconst glob_1 = require(\"glob\");\nconst fs_1 = __importDefault(require(\"fs\"));\nconst simple_git_1 = require(\"simple-git\");\nconst handlebars_1 = __importDefault(require(\"handlebars\"));\nconst multisigs_collector_1 = require(\"../core/multisigs-collector\");\nconst filtered_collector_1 = require(\"../core/filtered-collector\");\nconst rbac_collector_1 = require(\"../core/rbac-collector\");\nconst access_key_collector_1 = require(\"../core/access-key-collector\");\nconst get_backstage_entities_1 = require(\"../utils/get-backstage-entities\");\nclass BackstageExport {\n    constructor() {\n        this.template_path = \"\";\n        this.output_path = \"\";\n    }\n}\nexports.BackstageExport = BackstageExport;\nconst backstageExport = async ({ backstage_url, backstage_entities_repo, template_path, output_path, scope, testing, }) => {\n    if (!template_path || !output_path) {\n        throw new Error(\"set template_path and output_path for handlebars templating\");\n    }\n    const entities = await (0, get_backstage_entities_1.getBackstageEntities)({\n        backstage_url,\n        backstage_entities_repo,\n    });\n    const multisigsCollector = new multisigs_collector_1.MultisigsCollector(entities, { scope });\n    const filteredCollector = new filtered_collector_1.FilteredCollector(entities, { scope });\n    const rbacCollector = new rbac_collector_1.RbacCollector(entities, { scope });\n    const accessKeyCollector = new access_key_collector_1.AccessKeyCollector(entities, { scope });\n    // console.log(JSON.stringify(multisigsCollector.systemComponents[0], null, 2));\n    const changedFiles = (0, glob_1.sync)(`${template_path}**/*.hbs`).reduce((acc, templatePath) => {\n        const templateData = {\n            multisigSystemComponents: multisigsCollector.systemComponents,\n            contractSystemComponents: rbacCollector.systemComponents,\n            accessKeySystemComponents: accessKeyCollector.systemComponents,\n            filteredEntities: JSON.stringify(filteredCollector.entities, null, 2),\n            testing,\n        };\n        if (reexportTemplate({\n            backstage_url,\n            output_path,\n            template_path,\n            templatePath,\n            templateData,\n        })) {\n            return [templatePath, ...acc];\n        }\n        return acc;\n    }, []);\n    if (testing) {\n        core.info(`Testing mode: ${changedFiles.length} changed files, exiting`);\n        return true;\n    }\n    if (changedFiles.length === 0) {\n        core.info(\"No changed files, nothing to commit\");\n        return false;\n    }\n    await commitAndPushChanges(output_path);\n    return true;\n};\nexports.backstageExport = backstageExport;\nfunction reexportTemplate(inputs) {\n    const outputPath = inputs.output_path +\n        inputs.templatePath.replace(inputs.template_path, \"\").replace(\".hbs\", \"\");\n    const compiledTemplate = handlebars_1.default.compile(fs_1.default.readFileSync(inputs.templatePath, { encoding: \"utf8\" }), {\n        strict: true,\n    });\n    const options = {\n        helpers: {\n            backstageLink: (entity) => {\n                if (!entity)\n                    return \"undefined\";\n                const md = entity.metadata;\n                return `${inputs.backstage_url}/catalog/${md.namespace}/${entity.kind}/${md.name}`;\n            },\n        },\n    };\n    const compiledContent = compiledTemplate(inputs.templateData, options);\n    const existingContent = fs_1.default.existsSync(outputPath) &&\n        fs_1.default.readFileSync(outputPath, {\n            encoding: \"utf-8\",\n        });\n    if (compiledContent !== existingContent) {\n        core.info(`Writing ${outputPath}: changed content`);\n        fs_1.default.writeFileSync(outputPath, compiledContent);\n        return true;\n    }\n    return false;\n}\nasync function commitAndPushChanges(path) {\n    const git = (0, simple_git_1.simpleGit)(\".\");\n    await git.addConfig(\"user.email\", \"security@aurora.dev\");\n    await git.addConfig(\"user.name\", \"Backstage Exporter\");\n    await git.add(path);\n    const msg = \"chore(backstage): 🥷🏽 automatic re-export\";\n    await git.commit(msg, undefined);\n    await git.push();\n    core.info(\"Updated and pushed the changes\");\n    return true;\n}\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getBackstageEntities = void 0;\nconst core = __importStar(require(\"@actions/core\"));\nconst catalog_client_1 = require(\"@backstage/catalog-client\");\nconst simple_git_1 = require(\"simple-git\");\nconst getBackstageEntities = async ({ backstage_url: backstageUrl, backstage_entities_repo: backstageEntitiesRepo, }) => {\n    if (backstageUrl) {\n        try {\n            return fetchBackstageEntitiesFromURL(backstageUrl);\n        }\n        catch (err) {\n            /* empty */\n        }\n    }\n    // repo used as fallback to the URL in order to avoid unnecessary runtime\n    // dependency\n    if (backstageEntitiesRepo) {\n        return fetchBackstageEntitiesFromRepo(backstageEntitiesRepo);\n    }\n    throw new Error(\"Backstage URL or entities repo is required. Set BACKSTAGE_URL (github secret) or pass backstage_entities_repo argument to this action\");\n};\nexports.getBackstageEntities = getBackstageEntities;\nasync function getFileContentFromRepo(repoUrl, filePath) {\n    const cloneDir = `/tmp/github-helpers-${Date.now()}`;\n    const git = (0, simple_git_1.simpleGit)();\n    try {\n        await git.clone(repoUrl, cloneDir, [\"--depth=1\"]);\n        await git.cwd(cloneDir);\n        const { current } = await git.branch();\n        const defaultBranch = current || \"main\";\n        const fileContent = await git.show([\n            `${defaultBranch}:${filePath}`,\n        ]);\n        await git.raw([\"rm\", \"-rf\", \".\"]);\n        return fileContent;\n    }\n    catch (error) {\n        throw new Error(`Failed to fetch ${repoUrl}/${filePath}: ${error}`);\n    }\n}\nasync function fetchBackstageEntitiesFromURL(backstageUrl) {\n    core.info(\"Connecting to Backstage to fetch available entities\");\n    const discoveryApi = {\n        async getBaseUrl() {\n            return `${backstageUrl}/api/catalog`;\n        },\n    };\n    const catalogClient = new catalog_client_1.CatalogClient({\n        discoveryApi,\n    });\n    const entities = await catalogClient.getEntities({});\n    core.info(`Total backstage entities: ${entities.items.length}`);\n    return entities.items;\n}\nasync function fetchBackstageEntitiesFromRepo(backstageEntitiesRepo) {\n    const serverUrl = process.env.GITHUB_SERVER_URL || \"https://github.com\";\n    const repoUrl = `${serverUrl}/${backstageEntitiesRepo}`;\n    core.info(`Cloning ${repoUrl}`);\n    const content = await getFileContentFromRepo(repoUrl, \"filteredEntities.json\");\n    return JSON.parse(content);\n}\n"],"names":[],"sourceRoot":""}